{"Name":"Google Sign-In for iOS","Id":2438,"Alias":"googleiossignin","Description":"\nGoogle Sign-In is a secure authentication system that reduces the burden of login for your users, by enabling them to sign in with their Google account—the same account they already use with Gmail, Play, Google+, and other Google services.\n\nGoogle Sign-In is also your gateway to connecting with Google’s users and services in a secure manner. You can give your users the opportunity to pay with Android Pay, share with their Google-wide contacts, save a file to Drive, add an event to Calendar, and more. Integrate Google’s user-centric APIs and services inside your app to help your users take action and convert.","Version":"2.4.0.0","Summary":"Get users into your apps quickly and securely, using a registration system they already use and trust.","QuickStart":"\n\nConfiguring your App\n--------------------\n\nGoogle provides an easy to use configuration web tool to generate a config file for your app:  \n\n1. Open [Google\u0027s configuration tool][1] to create a config file for your app.\n2. Enter your app\u0027s name and iOS Bundle ID and click continue\n3. Click *Enable Sign-In*\n4. Click *continue* to generate the configuration files\n5. Click *Download Google-Service-Info.plist*\n6. Add `GoogleService-Info.plist` to your Xamarin.iOS app project and set the *Build Action* to `BundleResource`\n7. In your Xamarin.iOS app project\u0027s `Info.plist` file, add the following URL Types:\n  - Role: `Editor` URL Schemes: `your.app.bundle.id` \n  - Role: `Editor` URL Schemes: `value of REVERSED_CLIENT_ID from GoogleService-Info.plist`\n  \n\nSetup your AppDelegate\n----------------------\n\nIn order for Sign-In to work properly, you must tell the SDK about some of your application lifecycle events.\n\nIn your `AppDelegate.cs`, in the `FinishedLaunching (..)` override, you should add the following code to the start of the method:\n\n// ClientID can be found in the GoogleService-Info.plist file\n// You can get the GoogleService-Info.plist file at https://developers.google.com/mobile/add\n``` csharp\nstring clientId = \"ClientID\";\n\nNSError configureError;\nContext.SharedInstance.Configure (out configureError);\nif (configureError != null) {\n\t// If something went wrong, assign the clientID manually\n\tConsole.WriteLine (\"Error configuring the Google context: {0}\", configureError);\n\tSignIn.SharedInstance.ClientID = clientId;\n}\n```\n\nNext, add the following override to your AppDelegate class (or if it already exists, add the code inside the method to the existing implementation:\n\n``` csharp\npublic override bool OpenUrl (UIApplication application, NSUrl url, string sourceApplication, NSObject annotation)\n{\n\treturn SignIn.SharedInstance.HandleUrl (url, sourceApplication, annotation);\n}\n```\n\n\nSigning In\n----------\n\nGoogle Sign-In provides a `SignInButton` to add to your views and handles starting the sign in process.  You can add the button to your app in code or by using storyboards:\n\n``` csharp\nSignInButton = new SignInButton ();\nSignInButton.Frame = new CGRect (20, 100, 150, 44);\nView.AddSubview (SignInButton);\n\n// Assign the SignIn Delegates to receive callbacks\nSignIn.SharedInstance.UIDelegate = this;\nSignIn.SharedInstance.Delegate = this;\n```\n\nYou also must implement `ISignInDelegate` as well as `ISignInUIDelegate` and provide a `DidSignIn` method to know when the sign-in completed and if it was successful:\n\n``` csharp\npublic void DidSignIn (SignIn signIn, GoogleUser user, NSError error)\n{\n\tif (user != null \u0026\u0026 error == null)\n\t\t// Disable the SignInButton\n}\n```\n\nThe `SignInUserSilently` method attempts to sign in a previously authenticated user without interaction.  This can be done in a `ViewDidLoad` method or `ViewDidAppear` of your `UIViewController`:\n\n``` csharp\n// Assign the SignIn Delegates to receive callbacks\nSignIn.SharedInstance.UIDelegate = this;\nSignIn.SharedInstance.Delegate = this;\n\n// Sign the user in automatically\nSignIn.SharedInstance.SignInUserSilently ();\n```\n\nSigning Out and Disconnecting \n----------\n\nTo sign out a user simply call the `SignOutUser` method on the `SignIn` object:\n\n``` csharp\nSignOutButton.TouchUpInside += (sender, e) =\u003e {\n\tSignIn.SharedInstance.SignOutUser ();\n\n\tSignInButton.Enabled = true;\n\tSignOutButton.Enabled = false;\n};\n```\n\nTo completely disconnect the current user from the app and revoke previous authentication call the `DisconnectUser` method on the `SignIn` object.\n\n\n[1]: https://developers.google.com/mobile/add?platform=ios\u0026cntapi=gcm\n","Hash":"fbfc16fdbafee8f6bdd6319e08d07a9e","TargetPlatforms":["ios"],"TrialHash":null}